====================================
Metrics
====================================

This benchmark uses four different metrics:

- Average absolute distance (AAD);
- Area under the receiver operator characteristic (ROC) curve (AUC);
- Frobenius distance; and
- Rank top.

For more complete explanations of the metrics, the reader is referred to the 2010 publication from Smith and Kortemme [1]_. Much
of the text below paraphrases explanations from that paper. In that paper, the authors mention that the combination of all of
the metrics helped to guide and improve performance of their method.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Average absolute distance (AAD)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The average absolute difference is used to present the average amino acid frequency error when comparing the predictions
with phage display results. A prediction is considered to be perfect if the AAD is 0%, good if the AAD is <6%, and worst
if the AAD is 10%.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Area under the receiver operator characteristic curve (AUC)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The most populated amino acids are defined as those with phage display frequency â‰¥ 10%. The AUC metric depends solely on
the relative ranking of amino acids, indicating how well the prediction ranks the most populated amino acids. An AUC score
of 0.5 represents random predictive power, 0.75 represents a good score/prediction, and 1.0 represents a perfect score.

~~~~~~~~~~~~~~~~~~
Frobenius distance
~~~~~~~~~~~~~~~~~~

The Frobenius distance/norm (or Euclidean norm) is also considered. The best score is 0 and the worst is 2\ :sup:`1/2`. On its own,
this metric appears to be biased towards rewarding flat profiles rather than profiles with more information content / specificity \[\ 1_\].

~~~~~~~~
Rank top
~~~~~~~~

The predicted rank of the most frequent experimentally observed amino acid. When the prediction has a tie situation, the
maximum rank should be used \[\ 1_\].


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Correlations between the metrics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Figure 5 in the 2010 paper suggests that the AAD and Frobenius distance metrics are highly correlated (an expected result)
for the dataset in that paper, as are the Rank top and AUC metrics which both consider the most frequently predicted amino
acids.

================
Running analysis
================

~~~~~~~~~~~~~~
Required tools
~~~~~~~~~~~~~~

The analysis scripts require the `R software suite <http://www.r-project.org>`_. The scripts have been tested using R
versions 2.12.1 and 3.1.1.

~~~~~~~~~~~~~~~~
Analysis scripts
~~~~~~~~~~~~~~~~

Two analysis scripts are provided. Both currently expect output in the format generated by the Rosetta sequence tolerance
protocol and both are written in R. These scripts may be modified to work more generally in the event that different sequence
tolerance protocols are added to this capture.

The general analysis script only considers the predicted output. It produces a set of plots which summarize the predicted
sequence space of the designed positions. This script can be used on sequence tolerance predictions of any PDB structure so
long as the output matches the Rosetta sequence tolerance protocol. Versions of this script are used on public webservers
which run this protocol e.g. `RosettaBackrub <https://kortemmelab.ucsf.edu/backrub>`_ and `ROSIE <http://rosie.rosettacommons.org/>`_.
This script generates a Predicted Rank table for the designed positions (*e.g.* see Figure 3 in the 2011 paper).

The benchmark analysis script considers both the predicted output and published phage display data. This script generates
the four metrics above - the AAD, the AUC, the Frobenius distance, and the Rank top - and produces figures similar to those
from the Smith & Kortemme PLOS ONE 2011 paper.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
General analysis script - sequence_tolerance.R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

------------
Instructions
------------

Navigate to the directory with the output data from the run and then execute the R script *e.g.*:

::

  cd output/sample
  R
  > source("../../analysis/sequence_tolerance.R")
  > process_seqtol()

The process_seqtol function call above uses a set of default values. These can be overridden and are, in order:

 - the path to the input;
 - the fitness function weights (inter- and intra-molecular weights);
 - the Boltzmann temperature / sequence cutoff;
 - the type of sequence weighting ("boltzmann" or "cutoff");
 - the percentile cutoff for merging position weight matrices from different backbone structures;
 - plotgen (TRUE or FALSE (default)). If set to TRUE then a a plot similar to Figure 5 in the 2011 ([2]_) manuscript will be produced;
 - plotseq (TRUE (default) or FALSE). If set to TRUE then a sequence contribution plot is generated.

See the `Rosetta documentation <https://www.rosettacommons.org/docs/latest/sequence-tolerance.html>`_ or \[\ 1_\] for more
details. For example, the process_seqtol call above uses the default values and is equivalent to:

::

 > process_seqtol('.', c(1/2.5, 1/2.5, 1/2.5, 1), 0.228, c("boltzmann", "cutoff"), .5, "specificity", FALSE, TRUE)

-----------
Input files
-----------

The script expects the following files in the format used by the Rosetta sequence tolerance application:

 - 1N7T_{ITERATION}.ga.entities.gz;
 - 1N7T_{ITERATION}.ga.generations.gz;
 - 1N7T_{ITERATION}_seqtol.out;
 - the input PDB to the sequence tolerance step (read from *e.g.* 1N7T_{ITERATION}_seqtol.out).

where {ITERATION} indicates an member of an ensemble *e.g.* 1N7T_0001.ga.entities.gz. The script will automatically find
and use all entities.gz and generations.gz files in the current working directory.

------------
Output files
------------

The analysis generates the following files:

 - specificity_pwm.txt; a position weight matrix;
 - specificity_sequences.fasta; a FASTA file which can be used to generate a sequence logo;
 - specificity_boxplot_{RESIDUE POSITION}.png; a series of boxplots per designed position;
 - specificity_boxplot.pdf/.png; a combined PDF/image of the boxplots above;
 - specificity_seqrank.pdf/.png; a predicted ranking table for selected amino acid types for the positions;
 - specificity_seqcontrib.pdf; a sequence contribution plot.

For more details, see the Smith & Kortemme 2010 paper (references below).


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Benchmark analysis script - figures.R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

-------------------------------------------------
Changes in the output format since the 2010 paper
-------------------------------------------------

The output of the sequence tolerance application changed in Rosetta version 36344 (2010). The versions of the analysis scripts contained
herein expect output in the original format. The analysis/convert_new_seqtol_to_old.py script changes the output from newer revisions
into the older format so that the analysis scripts will continue to work.

------------
Instructions
------------

Before running this script, you must run the benchmark in its entirety. Alternatively, the output of a full run can be
found in the `RosettaCommons repositories <https://github.com/RosettaCommons/demos/tree/master/protocol_capture/2010/backrub_seqtol>`_ and
at in the Smith & Kortemme 2011 Protocol Capture `here <http://kortemmelab.ucsf.edu/data/>`__.

In order to partially test the script, we have included enough sample data files in the output folder of this archive to recreate Figures
1 and 2 from the 2011 paper.

To run the script, navigate to the directory with the output data and then start R script *e.g.*:

::

  cd output
  R
  > library("extrafont")                        # May be required - see below
  > source("../analysis/figures.R")

-----------
Input files
-----------

The script expects to be run in a sibling directory to the data/ and input/ folders of this archive which contains the output
data for each benchmark case in its own folder *i.e.*:

 - 1A22_1/
 - ...
 - 1A22_6/
 - 1N7T/
 - 1N7T_V83K/
 - 2FNE_A_C_V2048/
 - 2I0L_A_C_V2006/
 - 2IWP_B_A_V1927/
 - 2QMT/

where each directory .ga.entities.gz and .ga.generation.gz files, PDBs, and Rosetta standard output files.

------------
Output files
------------

The script generates a series of figures similar to those produced in the 2011 paper. This files are named similarly to
the labels used in that paper e.g. *Figure2_2QMTSeqRank.pdf* so we refer the reader to that publication.

In terms of benchmark evaluation, the most important file that is generated is Table1.txt. This file will contain the four
metrics listed above for each of the domains/datasets in the benchmark.

---------------
Troubleshooting
---------------

If you receive the error message "unknown family 'Arial'" then you may be missing the Arial fonts used by the script. These
commands may fix the issue if you have the Arial.ttf installed on your system.

::

  > install.packages("extrafont")
  > library("extrafont")
  > font_import()

The result of running:

::

  > fonts()

should now include the Arial font. Exit R and now run:

::

  R
  > library("extrafont")
  > source("../analysis/figures.R")


==========
References
==========

.. [1] Smith, CA, Kortemme, T. Structure-Based Prediction of the Peptide Sequence Space Recognized by Natural and Synthetic PDZ Domains. 2010. J Mol Biol 402(2):460-74. `doi: 10.1016/j.jmb.2010.07.032 <http://dx.doi.org/10.1016/j.jmb.2010.07.032>`_.
.. [2] Smith, CA, Kortemme, T. Predicting the Tolerated Sequences for Proteins and Protein Interfaces Using RosettaBackrub Flexible Backbone Design. 2011. PLoS ONE 6(7):e20451. `doi: 10.1371/journal.pone.0020451 <http://dx.doi.org/10.1371/journal.pone.0020451>`_.
